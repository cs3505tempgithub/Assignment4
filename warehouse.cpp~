#include <map>
#include <queue>
#include <string>
#include "warehouse.h"

namespace cs3505
{
  warehouse::warehouse(std::map<int, int> properties, date d)
  {
    this->food_life = properties;
    this->todays_date = d;
  }

  void warehouse::add_inventory(int uid, int quantity)
  {
    // Count returns 0 or 1 when searching for a key
    // If it doesn't exist, make a new queue of that type of food
    if (inventory.count(uid) == 0)
      {
	std::deque<food> new_element;
	inventory[uid] = new_element;
	food new_food (todays_date.get_today_date(), this->food_life[uid], quantity);
	inventory[uid].push_back(new_food);
      }
    else
      {
	food new_food (todays_date.get_today_date(), this->food_life[uid], quantity);
	inventory[uid].push_back(new_food);
      }
  }

  bool warehouse::remove_inventory(int uid, int requested)
  {
    if (inventory.count(uid) == 0)
      {
	return false;
      }
    int remaining_request = requested;
    
    while (remaining_request > 0 || inventory[uid].size() != 0)
      {
	inventory[uid].front().quantity -= remaining_request;
	if (inventory[uid].front().quantity <= 0)
	  {
	    remaining_request = inventory[uid].front().quantity * -1;
	    if (inventory[uid].size() > 0)
	      inventory[uid].pop_front();
	    else{return false;}
	  }
	else
	  {
	    remaining_request = 0;
	    return true;
	  }	
      } 
    return true;
  }

  void warehouse::remove_expired_food()
  {
    for(std::map<int, std::deque<food> >::iterator it=inventory.begin(); it!=inventory.end(); it++)
      {
	while (it->second.front().exp_date.get_today_date().compare(this->todays_date.get_today_date()) == 0)
	  {
	    if (it->second.size() > 0)
	      it->second.pop_front();
	  }
      }
  }

  int warehouse::get_quantity(int uid)
  {
    int result=0;
    if (inventory.count(uid) == 0)
      {
	return 0;
      }
    for (std::deque<food>::iterator it=inventory[uid].begin(); it!=inventory[uid].end(); it++)
      {
	result += it->quantity;
      }
    return result;
  }

}
